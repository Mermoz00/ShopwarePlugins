<?php declare(strict_types=1);

namespace BAL\DreiDimBild;

use Doctrine\DBAL\Connection;
use Shopware\Core\Framework\Context;
use Shopware\Core\Framework\DataAbstractionLayer\Indexing\EntityIndexerRegistry;
use Shopware\Core\Framework\DataAbstractionLayer\Search\Filter\EqualsFilter;
use Shopware\Core\Framework\Plugin;
use Shopware\Core\Framework\Plugin\Context\ActivateContext;
use Shopware\Core\Framework\Plugin\Context\InstallContext;
use Shopware\Core\Framework\Plugin\Context\UninstallContext;
use Shopware\Core\System\CustomField\CustomFieldTypes;
use Shopware\Core\Framework\DataAbstractionLayer\Search\Criteria;

class DreiDimBild extends Plugin
{
    private $uploadPath = 'upload/three/';

    public function activate(ActivateContext $activateContext): void
    {
        $registry = $this->container->get(EntityIndexerRegistry::class);
        $registry->sendIndexingMessage(['product.indexer']);
    }
    public function install(InstallContext $installContext): void
    {
        parent::install($installContext); // TODO: Change the autogenerated stub

        if (!is_dir($this->uploadPath)) {
            mkdir($this->uploadPath, 0777, true);
        }
        $customFieldSetRepository = $this->container->get('custom_field_set.repository');
        $check=$customFieldSetRepository->search( (new Criteria())->addFilter(new EqualsFilter('name', 'custom_bg')),$installContext->getContext());
        if($check->getTotal()==0) {
            $customFieldSetRepository->create([
                [
                    'name' => 'custom_bg',
                    'config' => [
                        'label' => [
                            'de-DE' => '3D Bild hintergrund',
                            'en-GB' => '3D picture background'
                        ]
                    ],
                    'relations' => [
                        ['entityName' => 'category'],
                        ['entityName' => 'product']
                    ],
                    'customFields' => [
                        [
                            'name' => 'custom_bg_image',
                            'type' => CustomFieldTypes::TEXT,
                            'config' => [
                               /* 'label' => [
                                    'de-DE' => 'hintergrundimage',
                                    'en-GB' => 'background-image'
                                ],*/
                                'componentName' => "sw-media-field",
                                'customFieldType' => "media"
                            ]
                        ],
                        [
                            'name' => 'custom_bg_color',
                            'type' => CustomFieldTypes::TEXT,
                            'config' => [
                              /*  'label' => [
                                    'de-DE' => 'hintergrundfarbe',
                                    'en-GB' => 'background-color'
                                ],*/
                                'componentName' => "sw-colorpicker",
                                'customFieldType' => "text"
                            ]
                        ]
                    ]
                ]
            ], $installContext->getContext());
        }
    }
    public function uninstall(UninstallContext $uninstallContext): void
    {
        parent::uninstall($uninstallContext);
        if ($uninstallContext->keepUserData()) {
            return;
        }

        $customFieldSetRepository = $this->container->get('custom_field_set.repository');

        $temp=$customFieldSetRepository->search(
            (new Criteria())->addFilter(new EqualsFilter('name', 'custom_bg'))
            ,Context::createDefaultContext());
        if($temp->getTotal()==1) {
            $temp1=$temp->getEntities()->getElements();
            $id=array_shift($temp1)->getId();

            $customFieldSetRepository->delete([
                ['id'=>$id]
            ],$uninstallContext->getContext());
        }
        $connection = $this->container->get(Connection::class);
        $connection->executeUpdate('DROP TABLE IF EXISTS `bal_three_product`');
        $connection->executeUpdate('DROP TABLE IF EXISTS `bal_three`');
        $this->deleteThreeColumn($connection);

    }
    public function deleteThreeColumn($connection){
        $connection->executeUpdate("set @exist_Check := (
            select count(*) from information_schema.columns
            where TABLE_NAME='product'
            and COLUMN_NAME='threes'
            and TABLE_SCHEMA='shopware'
            );
            set @sqlstmt := if(@exist_Check>0,'alter table product drop column threes', 'select ''''') ;
            prepare stmt from @sqlstmt ;
            execute stmt ;");
    }
}
